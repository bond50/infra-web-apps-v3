name: 99 - Apply GitHub Branch Protections (manual)

on:
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

jobs:
  apply-bp:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: github # run TF from ./github

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      # Fail fast if any required repo Variables are missing/empty
      - name: Preflight â€” verify Variables
        shell: bash
        run: |
          set -euo pipefail
          req=(AWS_REGION AWS_ROLE_ARN TF_STATE_BUCKET TF_STATE_TABLE TF_STATE_KEY)
          for v in "${req[@]}"; do
            val="${{ vars.AWS_REGION }}"
            case "$v" in
              AWS_REGION)       val="${{ vars.AWS_REGION }}";;
              AWS_ROLE_ARN)     val="${{ vars.AWS_ROLE_ARN }}";;
              TF_STATE_BUCKET)  val="${{ vars.TF_STATE_BUCKET }}";;
              TF_STATE_TABLE)   val="${{ vars.TF_STATE_TABLE }}";;
              TF_STATE_KEY)     val="${{ vars.TF_STATE_KEY }}";;
            esac
            if [ -z "$val" ]; then
              echo "Missing variable: $v"; exit 1
            fi
          done
          if [[ ! "${{ vars.AWS_REGION }}" =~ ^[a-z]+-[a-z]+-[0-9]+$ ]]; then
            echo "Invalid AWS_REGION: '${{ vars.AWS_REGION }}'"; exit 1
          fi
          echo "Preflight OK."

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-session-name: gha-bp-${{ github.run_id }}

      # Use a backend.hcl so we don't fight quoting/empty vars
      - name: Terraform init (S3 backend via Variables)
        shell: bash
        run: |
          set -euo pipefail
          cat > backend.hcl <<EOF
          bucket         = "${{ vars.TF_STATE_BUCKET }}"
          key            = "${{ vars.TF_STATE_KEY }}/github-branch-protection.tfstate"
          region         = "${{ vars.AWS_REGION }}"
          dynamodb_table = "${{ vars.TF_STATE_TABLE }}"
          encrypt        = true
          EOF
          echo "backend.hcl:"
          cat backend.hcl
          terraform init -input=false -backend-config=backend.hcl

      - name: Terraform plan (branch protections)
        env:
          TF_VAR_github_token: ${{ secrets.GH_TOKEN_ADMIN }}
          TF_VAR_github_owner: "bond50"
          TF_VAR_repo_name: "infra-web-apps-v3"
        run: |
          terraform fmt -check
          terraform validate
          terraform plan \
            -target=github_branch_protection.main \
            -target=github_branch_protection.develop \
            -target=github_branch_protection.release_star \
            -target=github_branch_protection.hotfix_star \
            -out=bp.tfplan

      - name: Terraform apply (branch protections)
        env:
          TF_VAR_github_token: ${{ secrets.GH_TOKEN_ADMIN }}
          TF_VAR_github_owner: "bond50"
          TF_VAR_repo_name: "infra-web-apps-v3"
        run: terraform apply -auto-approve bp.tfplan
