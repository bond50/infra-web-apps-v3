name: 91 - Terraform Apply (manual)

on:
    workflow_dispatch:
        inputs:
            workspace:
                description: "Terraform workspace (e.g., default/prod/staging)"
                required: false
                default: "default"
            directory:
                description: "TF root module directory"
                required: false
                default: "."
            state_key_suffix:
                description: "Suffix under TF_STATE_KEY (e.g., live/terraform.tfstate)"
                required: false
                default: "live/terraform.tfstate"
            replace_compute_only:
                description: "Force-recreate only the minimal host (EC2)"
                type: boolean
                required: false
                default: false
            plan_only:
                description: "Only plan (do not apply)"
                type: boolean
                required: false
                default: false
            confirm:
                description: "Optional safety: type APPLY to continue (leave blank to skip)"
                required: false
                default: ""

permissions:
    id-token: write
    contents: read

concurrency:
    group: apply-${{ github.ref }}
    cancel-in-progress: false

jobs:
    tf-apply:
        name: terraform-apply
        runs-on: ubuntu-latest

        defaults:
            run:
                working-directory: ${{ inputs.directory }}

        env:
            AWS_REGION: ${{ vars.AWS_REGION }}
            AWS_ROLE_ARN: ${{ vars.AWS_ROLE_ARN }}
            TF_STATE_BUCKET: ${{ vars.TF_STATE_BUCKET }}
            TF_STATE_KEY: ${{ vars.TF_STATE_KEY }}

        steps:
            - name: Optional guard â€” require APPLY
              if: ${{ inputs.confirm != '' }}
              shell: bash
              run: |
                  set -euo pipefail
                  if [ "${{ inputs.confirm }}" != "APPLY" ]; then
                    echo "Refusing: confirmation phrase mismatch."
                    exit 1
                  fi
                  echo "Confirmation accepted."

            - name: Checkout
              uses: actions/checkout@v5

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v3
              with:
                  terraform_version: 1.13.3

            - name: Configure AWS (OIDC)
              uses: aws-actions/configure-aws-credentials@v5
              with:
                  role-to-assume: ${{ env.AWS_ROLE_ARN }}
                  aws-region: ${{ env.AWS_REGION }}
                  role-session-name: gha-tf-apply-${{ github.run_id }}

            - name: Terraform init (S3 backend)
              shell: bash
              run: |
                  set -euo pipefail
                  terraform init -input=false \
                    -backend-config="bucket=${TF_STATE_BUCKET}" \
                    -backend-config="key=${TF_STATE_KEY}/${{ inputs.state_key_suffix }}" \
                    -backend-config="region=${AWS_REGION}" \
                    -backend-config="encrypt=true"

            - name: Select/Create workspace
              shell: bash
              run: |
                  set -euo pipefail
                  terraform workspace list || true
                  terraform workspace select "${{ inputs.workspace }}" || terraform workspace new "${{ inputs.workspace }}"
                  terraform workspace show

            - name: Build replace flags (optional)
              id: flags
              shell: bash
              run: |
                  set -euo pipefail
                  REPLACE_ARGS=""
                  if [ "${{ inputs.replace_compute_only }}" = "true" ]; then
                    # This address matches the minimal host EC2 in your repo
                    REPLACE_ARGS="-replace=module.compute_min_host.aws_instance.this"
                  fi
                  echo "replace_args=$REPLACE_ARGS" >> "$GITHUB_OUTPUT"

            - name: Terraform plan
              shell: bash
              env:
                  TF_VAR_region: ${{ env.AWS_REGION }}
              run: |
                  set -euo pipefail
                  terraform plan -input=false -no-color ${{ steps.flags.outputs.replace_args }} -out=tfplan.apply

            - name: Upload apply plan
              uses: actions/upload-artifact@v4
              with:
                  name: tfplan-apply-${{ github.run_number }}
                  path: ${{ inputs.directory }}/tfplan.apply
                  retention-days: 7

            - name: Stop if plan_only
              if: ${{ inputs.plan_only }}
              run: echo "Plan-only requested. Exiting before apply."

            - name: Apply plan
              if: ${{ !inputs.plan_only }}
              shell: bash
              env:
                  TF_VAR_region: ${{ env.AWS_REGION }}
              run: |
                  set -euo pipefail
                  terraform apply -input=false -no-color -auto-approve tfplan.apply
