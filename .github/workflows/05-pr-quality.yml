###############################################################
# 05 - PR Quality Gate (fmt → validate → TFLint → Checkov → Plan)
# Purpose:
#  - Fast feedback for *pull requests* (no apply).
#  - Uses OIDC to read AWS (no long-lived keys).
#  - Uploads a Terraform plan artifact for reviewers.
# Notes:
#  - Requires repo Variables set by bootstrap:
#    AWS_REGION, AWS_ROLE_ARN, TF_STATE_BUCKET, TF_STATE_TABLE, TF_STATE_KEY
###############################################################

name: 05 - PR Quality Gate # Name seen in Actions UI

on: # ───────── Triggers for this workflow ─────────
    pull_request: # Run on PR events only (opened, synchronize, etc.)
        branches: # ← ENFORCES: which *target* branches allow this workflow
            - develop #    run when PR targets develop (normal dev flow)
            - main #    run when PR targets main (e.g., hotfix or final release)
            - release/* #    run when PR targets any release/* branch
            - hotfix/* #    run when PR targets any hotfix/* branch

permissions: # ───────── Token permissions ─────────
    id-token: write # OIDC → AWS STS
    contents: read # Read code
    pull-requests: write # (Optional) comment/annotate PRs

concurrency: # ───────── Avoid duplicate PR runs ─────────
    group: pr-quality-${{ github.event.pull_request.number }}
    cancel-in-progress: true

jobs:
    pr-quality:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout repo
              uses: actions/checkout@v5 # Stable latest major

            ###############################################################
            # Preflight — verify Variables
            ###############################################################
            - name: Preflight — verify Variables
              shell: bash
              run: |
                  set -eu
                  [ -n "${{ vars.AWS_REGION }}" ] || { echo "Missing variable: AWS_REGION"; exit 1; }
                  [ -n "${{ vars.AWS_ROLE_ARN }}" ] || { echo "Missing variable: AWS_ROLE_ARN"; exit 1; }
                  [ -n "${{ vars.TF_STATE_BUCKET }}" ] || { echo "Missing variable: TF_STATE_BUCKET"; exit 1; }
                  [ -n "${{ vars.TF_STATE_TABLE }}" ] || { echo "Missing variable: TF_STATE_TABLE"; exit 1; }
                  [ -n "${{ vars.TF_STATE_KEY }}" ] || { echo "Missing variable: TF_STATE_KEY"; exit 1; }
                  if [[ ! "${{ vars.AWS_REGION }}" =~ ^[a-z]+-[a-z]+-[0-9]+$ ]]; then
                    echo "Invalid AWS_REGION: '${{ vars.AWS_REGION }}'"; exit 1
                  fi
                  echo "Preflight OK."

            - name: Setup Terraform
              uses: hashicorp/setup-terraform@v3
              with:
                  terraform_version: 1.13.3 # Latest stable TF

            - name: Configure AWS credentials (OIDC)
              uses: aws-actions/configure-aws-credentials@v5
              with:
                  role-to-assume: ${{ vars.AWS_ROLE_ARN }}
                  aws-region: ${{ vars.AWS_REGION }}
                  role-session-name: gha-pr-${{ github.run_id }}

            - name: Terraform Init (S3 backend via Variables; no lock/refresh during PR)
              run: |
                  terraform init -input=false \
                    -backend-config="bucket=${{ vars.TF_STATE_BUCKET }}" \
                    -backend-config="key=${{ vars.TF_STATE_KEY }}" \
                    -backend-config="region=${{ vars.AWS_REGION }}" \
                    -backend-config="dynamodb_table=${{ vars.TF_STATE_TABLE }}" \
                    -backend-config="encrypt=true"

            ###############################################################
            # FMT + VALIDATE
            ###############################################################
            - name: Terraform fmt (check only)
              run: terraform fmt -check -recursive

            - name: Terraform validate
              env:
                  TF_VAR_region: ${{ vars.AWS_REGION }}
              run: terraform validate

            ###############################################################
            # TFLint (best-practice lints for AWS/Terraform)
            ###############################################################
            - name: Setup TFLint
              uses: terraform-linters/setup-tflint@v5
              with:
                  tflint_version: v0.59.1

            - name: TFLint init & run
              run: |
                  tflint --init
                  tflint -f compact

            ###############################################################
            # Checkov (policy/security scan for Terraform)
            ###############################################################
            - name: Setup Python
              uses: actions/setup-python@v6
              with:
                  python-version: "3.13"

            - name: Install Checkov
              run: pip install --quiet "checkov==3.2.474"

            - name: Checkov scan (fail on findings)
              run: checkov -d . --framework terraform

            ###############################################################
            # PLAN (no lock, no refresh) + upload artifact for reviewers
            ###############################################################
            - name: Terraform plan (safe for PRs)
              env:
                  TF_VAR_region: ${{ vars.AWS_REGION }}
              run: terraform plan -input=false -no-color -lock=false -refresh=false -out=tfplan.bin

            - name: Upload plan artifact
              uses: actions/upload-artifact@v4
              with:
                  name: tfplan-pr-${{ github.event.pull_request.number }}
                  path: tfplan.bin
