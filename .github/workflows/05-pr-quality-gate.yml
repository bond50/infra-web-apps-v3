# .github/workflows/05-pr-quality-gate.yml
###############################################################
# 05 - PR Quality Gate (fmt → validate → TFLint → Checkov → Plan)
#  - Runs on PRs to any branch
#  - Uses OIDC for AWS (no apply)
#  - Uploads tfplan + Checkov SARIF as artifacts
###############################################################
name: 05 - PR Quality Gate

on:
  pull_request:
    branches: ["**"]

permissions:
  id-token: write
  contents: read
  pull-requests: write

concurrency:
  group: pr-quality-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  pr-quality:
    runs-on: ubuntu-latest

    steps:
      # -------------------- Checkout --------------------
      - name: Checkout repository code
        uses: actions/checkout@v5

      # -------------------- Preflight --------------------
      - name: Preflight — verify Variables
        shell: bash
        run: |
          set -eu
          [ -n "${{ vars.AWS_REGION }}" ] || { echo "Missing variable: AWS_REGION"; exit 1; }
          [ -n "${{ vars.AWS_ROLE_ARN }}" ] || { echo "Missing variable: AWS_ROLE_ARN"; exit 1; }
          [ -n "${{ vars.TF_STATE_BUCKET }}" ] || { echo "Missing variable: TF_STATE_BUCKET"; exit 1; }
          [ -n "${{ vars.TF_STATE_TABLE }}" ] || { echo "Missing variable: TF_STATE_TABLE"; exit 1; }
          [ -n "${{ vars.TF_STATE_KEY }}" ] || { echo "Missing variable: TF_STATE_KEY"; exit 1; }
          if [[ ! "${{ vars.AWS_REGION }}" =~ ^[a-z]+-[a-z]+-[0-9]+$ ]]; then
            echo "Invalid AWS_REGION: '${{ vars.AWS_REGION }}'"; exit 1
          fi
          echo "Preflight OK."

      # -------------------- Terraform CLI --------------------
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-session-name: gha-pr-${{ github.run_id }}

      # Init with S3 backend (NO DynamoDB), workspace per PR head branch
      - name: Terraform Init (S3 backend only) + Workspace
        shell: bash
        run: |
          set -euo pipefail
          # Derive a non-empty workspace name from PR head; fallback to base/name
          RAW="${GITHUB_HEAD_REF:-${GITHUB_REF_NAME:-main}}"
          WS="branch-${RAW//[^a-zA-Z0-9-_]/-}"
          echo "Using workspace: $WS"

          terraform init -input=false \
            -backend-config="bucket=${{ vars.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ vars.TF_STATE_KEY }}/pr/terraform.tfstate" \
            -backend-config="region=${{ vars.AWS_REGION }}" \
            -backend-config="encrypt=true"

          terraform workspace list || true
          # IMPORTANT: flag before the NAME
          terraform workspace select -or-create "$WS"

      # -------------------- fmt + validate --------------------
      - name: Terraform fmt (check only)
        run: terraform fmt -check -recursive

      - name: Terraform validate
        env:
          TF_VAR_region: ${{ vars.AWS_REGION }}
        run: terraform validate

      # -------------------- TFLint --------------------
      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v5
        with:
          tflint_version: v0.59.1

      - name: TFLint init & run
        run: |
          tflint --init
          tflint -f compact

      # -------------------- Checkov (CLI ONLY, non-blocking) --------------------
      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.13"

      - name: Install Checkov
        run: pip install --quiet "checkov==3.2.474"

      - name: Run Checkov (SARIF output, non-blocking, env sanitized)
        shell: bash
        continue-on-error: true
        run: |
          set -euo pipefail
          # Show what "checkov" resolves to (helps diagnose PATH clashes)
          type -a checkov || true
          python - <<'PY'
          # Remove any envs that might inject a bad --soft_fail flag via wrappers
          unset INPUT_SOFT_FAIL || true
          unset SOFT_FAIL || true
          unset CHECKOV_SOFT_FAIL || true
          mkdir -p reports
          # Call the module directly to bypass any shell wrappers
          python -m checkov -d . --framework terraform --quiet \
            --output sarif --output-file-path reports/checkov.sarif

      - name: Upload Checkov SARIF (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: checkov-sarif
          path: reports/checkov.sarif
          retention-days: 7

      # -------------------- Plan (safe) --------------------
      - name: Terraform plan (safe for PRs)
        env:
          TF_VAR_region: ${{ vars.AWS_REGION }}
        run: terraform plan -input=false -no-color -lock=false -refresh=false -out=tfplan.bin

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-pr-${{ github.event.pull_request.number }}
          path: tfplan.bin
          retention-days: 7
