###############################################################
# 05 - PR Quality Gate (fmt → validate → TFLint → Checkov → Plan)
# Purpose:
#  - Fast feedback on pull_requests.
#  - Uses OIDC to assume AWS role (read-only; never applies).
#  - Uploads tfplan + Checkov SARIF as artifacts for review.
# Notes:
#  - Requires repo Variables from bootstrap:
#    AWS_REGION, AWS_ROLE_ARN, TF_STATE_BUCKET, TF_STATE_TABLE, TF_STATE_KEY
###############################################################
name: 05 - PR Quality Gate

on:
  pull_request: # ← run on any PR to any target branch
    branches: ["**"]

permissions:
  id-token: write # ← needed for AWS OIDC (sts:AssumeRoleWithWebIdentity)
  contents: read # ← checkout the repo
  pull-requests: write # ← (optional) allow PR annotations/comments

concurrency:
  group: pr-quality-${{ github.event.pull_request.number }} # ← one run per PR
  cancel-in-progress: true # ← cancel older run on new push

jobs:
  pr-quality:
    runs-on: ubuntu-latest # ← GitHub-hosted Linux runner

    steps:
      ###############################################################
      # Checkout source
      ###############################################################
      - name: Checkout repository code
        uses: actions/checkout@v5 # ← stable major

      ###############################################################
      # Preflight — verify Variables exist & region format is valid
      ###############################################################
      - name: Preflight — verify Variables
        shell: bash
        run: |
          set -eu
          [ -n "${{ vars.AWS_REGION }}" ] || { echo "Missing variable: AWS_REGION"; exit 1; }
          [ -n "${{ vars.AWS_ROLE_ARN }}" ] || { echo "Missing variable: AWS_ROLE_ARN"; exit 1; }
          [ -n "${{ vars.TF_STATE_BUCKET }}" ] || { echo "Missing variable: TF_STATE_BUCKET"; exit 1; }
          [ -n "${{ vars.TF_STATE_TABLE }}" ] || { echo "Missing variable: TF_STATE_TABLE"; exit 1; }
          [ -n "${{ vars.TF_STATE_KEY }}" ] || { echo "Missing variable: TF_STATE_KEY"; exit 1; }
          if [[ ! "${{ vars.AWS_REGION }}" =~ ^[a-z]+-[a-z]+-[0-9]+$ ]]; then
            echo "Invalid AWS_REGION: '${{ vars.AWS_REGION }}' (expected 'us-east-1', 'eu-west-1', etc.)"
            exit 1
          fi
          echo "Preflight OK."

      ###############################################################
      # Terraform CLI + AWS OIDC
      ###############################################################
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3 # ← pinned TF CLI

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }} # ← role created by bootstrap
          aws-region: ${{ vars.AWS_REGION }} # ← region as variable
          role-session-name: gha-pr-${{ github.run_id }}

      - name: Terraform Init (S3 backend via Variables; no lock/refresh during PR)
        run: |
          terraform init -input=false \
            -backend-config="bucket=${{ vars.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ vars.TF_STATE_KEY }}" \
            -backend-config="region=${{ vars.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ vars.TF_STATE_TABLE }}" \
            -backend-config="encrypt=true"

      ###############################################################
      # FMT + VALIDATE
      ###############################################################
      - name: Terraform fmt (check only)
        run: terraform fmt -check -recursive # ← fail if formatting drift

      - name: Terraform validate
        env:
          TF_VAR_region: ${{ vars.AWS_REGION }} # ← if your modules expect var.region
        run: terraform validate

      ###############################################################
      # TFLint (Terraform + AWS best-practice checks)
      ###############################################################
      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v5
        with:
          tflint_version: v0.59.1 # ← pinned TFLint CLI

      - name: TFLint init & run
        run: |
          tflint --init                # ← download plugins per .tflint.hcl
          tflint -f compact            # ← lint with compact output

      ###############################################################
      # Checkov (policy/security scan for Terraform) — CLI ONLY
      # We run the CLI directly (not the action) to avoid the
      # '--soft_fail' arg issue. Fails the job on findings.
      ###############################################################
      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.13" # ← pinned Python for Checkov

      - name: Install Checkov
        run: pip install --quiet "checkov==3.2.474" # ← pinned Checkov

      - name: Checkov scan (fail on findings)
        run: |
          mkdir -p reports
          checkov -d . --framework terraform --quiet \
            --output sarif --output-file-path reports/checkov.sarif

      - name: Upload Checkov SARIF (artifact)
        if: always() # ← keep report even if scan fails
        uses: actions/upload-artifact@v4
        with:
          name: checkov-sarif
          path: reports/checkov.sarif

      ###############################################################
      # PLAN (no lock, no refresh) + upload artifact for reviewers
      ###############################################################
      - name: Terraform plan (safe for PRs)
        env:
          TF_VAR_region: ${{ vars.AWS_REGION }}
        run: terraform plan -input=false -no-color -lock=false -refresh=false -out=tfplan.bin

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-pr-${{ github.event.pull_request.number }} # ← unique per PR
          path: tfplan.bin
          retention-days: 7
