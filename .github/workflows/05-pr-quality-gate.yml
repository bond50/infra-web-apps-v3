name: 05 - PR Quality Gate

on:
  pull_request:
    branches: ["**"]
    types: [opened, synchronize, reopened]
  merge_group: {}

permissions:
  id-token: write
  contents: read
  pull-requests: write

concurrency:
  group: pr-quality-${{ github.event.pull_request.number }}
  cancel-in-progress: true

jobs:
  pr-quality:
    runs-on: ubuntu-latest
    name: pr-quality

    steps:
      - uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: Install deps
        run: pip install --quiet boto3 checkov==3.2.474

      - name: Branch naming guard
        env:
          BRANCH_GUARD: ${{ vars.BRANCH_GUARD || 'on' }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
        run: python scripts/pr_branch_guard.py

      - name: Preflight â€” required repo variables
        env:
          MODE: ci
          AWS_REGION: ${{ vars.AWS_REGION }}
          AWS_ROLE_ARN: ${{ vars.AWS_ROLE_ARN }}
          TF_STATE_BUCKET: ${{ vars.TF_STATE_BUCKET }}
          TF_STATE_KEY: ${{ vars.TF_STATE_KEY }}
        run: python scripts/preflight_required.py

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-session-name: gha-pr-${{ github.run_id }}

      - name: Normalize TF_VARs (lists/booleans)
        env:
          # feed TF_VAR_* from repo variables (lower/UPPER supported)
          TF_VAR_project_name: ${{ vars.TF_VAR_project_name }}
          TF_VAR_environment: ${{ vars.TF_VAR_environment }}
          TF_VAR_region: ${{ vars.TF_VAR_region || vars.AWS_REGION }}
          TF_VAR_vpc_cidr: ${{ vars.TF_VAR_vpc_cidr }}
          TF_VAR_public_subnet_cidrs: ${{ vars.TF_VAR_public_subnet_cidrs }}
          TF_VAR_private_app_subnet_cidrs: ${{ vars.TF_VAR_private_app_subnet_cidrs }}
          TF_VAR_private_db_subnet_cidrs: ${{ vars.TF_VAR_private_db_subnet_cidrs }}
          TF_VAR_azs: ${{ vars.TF_VAR_azs }}
          TF_VAR_enable_nat_gateway: ${{ vars.TF_VAR_enable_nat_gateway }}
          TF_VAR_use_eip: ${{ vars.TF_VAR_use_eip }}
          TF_VAR_enable_nat_instance: ${{ vars.TF_VAR_enable_nat_instance }}
          TF_VAR_ssh_allowed_cidr: ${{ vars.TF_VAR_ssh_allowed_cidr }}
        run: python scripts/normalize_tfvars.py

      - name: Terraform Init + Workspace (S3 backend only)
        env:
          TF_STATE_BUCKET: ${{ vars.TF_STATE_BUCKET }}
          TF_STATE_KEY: ${{ vars.TF_STATE_KEY }}/pr/terraform.tfstate
          AWS_REGION: ${{ vars.AWS_REGION }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          GITHUB_REF_NAME: ${{ github.ref_name }}
        run: python scripts/tf_init_ws.py

      - name: Terraform fmt/validate/plan (safe for PR)
        run: python scripts/tf_plan.py pr

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-pr-${{ github.event.pull_request.number }}
          path: tfplan.bin
          retention-days: 7

      - name: Run Checkov (SARIF, non-blocking)
        continue-on-error: true
        run: python -m checkov -d . --framework terraform --quiet --output sarif --output-file-path reports/checkov.sarif

      - name: Upload Checkov SARIF
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: checkov-sarif
          path: reports/checkov.sarif
          retention-days: 7
