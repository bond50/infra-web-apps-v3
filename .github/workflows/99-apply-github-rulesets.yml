name: 99 - Apply GitHub Admin (rulesets + collaborators)

on:
  workflow_dispatch: {} # run manually after merging to main

permissions:
  id-token: write # OIDC to AWS
  contents: read

jobs:
  apply-github-admin:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: github # run TF from ./github

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-session-name: gha-github-admin-${{ github.run_id }}

      # Ensure lock table exists (idempotent safety)
      - name: Ensure DynamoDB lock table exists
        shell: bash
        run: |
          set -euo pipefail
          TABLE="${{ vars.TF_STATE_TABLE }}"
          echo "Ensuring DynamoDB table '$TABLE' exists..."
          if aws dynamodb describe-table --table-name "$TABLE" >/dev/null 2>&1; then
            echo "Table exists."
          else
            echo "Creating table '$TABLE'..."
            aws dynamodb create-table \
              --table-name "$TABLE" \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --billing-mode PAY_PER_REQUEST
            echo "Waiting for table to become ACTIVE..."
            aws dynamodb wait table-exists --table-name "$TABLE"
            echo "Table ready."
          fi

      - name: Terraform init (S3 backend via repo Variables)
        run: |
          terraform init -input=false \
            -backend-config="bucket=${{ vars.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ vars.TF_STATE_KEY }}/github-admin.tfstate" \
            -backend-config="region=${{ vars.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ vars.TF_STATE_TABLE }}" \
            -backend-config="encrypt=true"

      - name: Terraform plan (all github admin)
        env:
          TF_VAR_github_token: ${{ secrets.GH_TOKEN_ADMIN }} # PAT w/ repo admin + read:org
          TF_VAR_github_owner: "bond50"
          TF_VAR_repo_name: "infra-web-apps-v3"
        run: terraform plan -out=github-admin.tfplan

      - name: Terraform apply (all github admin)
        env:
          TF_VAR_github_token: ${{ secrets.GH_TOKEN_ADMIN }}
          TF_VAR_github_owner: "bond50"
          TF_VAR_repo_name: "infra-web-apps-v3"
        run: terraform apply -auto-approve github-admin.tfplan
