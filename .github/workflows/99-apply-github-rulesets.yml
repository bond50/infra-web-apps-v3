name: 99 - Apply GitHub Rulesets

on:
  workflow_dispatch: {}

permissions:
  id-token: write
  contents: read

jobs:
  apply-github-admin:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: github # run TF in ./github where rulesets.tf lives
    env:
      GH_TOKEN: ${{ secrets.GH_TOKEN_ADMIN }} # for gh cli + provider
      OWNER: ${{ github.repository_owner }} # org/user
      REPO_FULL: ${{ github.repository }} # owner/repo
      REPO_NAME: ${{ github.event.repository.name }} # repo only (for import IDs)

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-session-name: gha-rulesets-${{ github.run_id }}

      - name: Terraform init (S3 backend via repo Variables)
        run: |
          terraform init -input=false \
            -backend-config="bucket=${{ vars.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ vars.TF_STATE_KEY }}/github-rulesets.tfstate" \
            -backend-config="region=${{ vars.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ vars.TF_STATE_TABLE }}" \
            -backend-config="encrypt=true"

      # === ADDED: Pre-import repository so TF manages existing repo instead of creating it ===
      - name: Pre-import repository (squash-only settings)
        env:
          TF_VAR_github_owner: ${{ github.repository_owner }}
          TF_VAR_github_token: ${{ secrets.GH_TOKEN_ADMIN }} # provider token for import
        run: |
          set -euo pipefail
          # Import only if not already in state
          terraform state show github_repository.repo >/dev/null 2>&1 || \
            terraform import -input=false github_repository.repo "${{ github.event.repository.name }}"
          # NOTE: Import ID is the repo *name* only; owner comes from provider config

      # NEW: Auto-import any existing rulesets by name so TF won't try to recreate them
      - name: Pre-import existing rulesets (by name)
        shell: bash
        env: # CHANGED: pass TF vars so provider can read
          TF_VAR_github_owner: ${{ github.repository_owner }}
          TF_VAR_github_token: ${{ secrets.GH_TOKEN_ADMIN }}
        run: |
          set -euo pipefail
          declare -A MAP=(
            ["main"]="github_repository_ruleset.main"
            ["develop"]="github_repository_ruleset.develop"
            ["release/*"]="github_repository_ruleset.release_star"
            ["hotfix/*"]="github_repository_ruleset.hotfix_star"
          )
          gh api "repos/${REPO_FULL}/rulesets" --jq '.[] | "\(.id)\t\(.name)"' | while IFS=$'\t' read -r ID NAME; do
            TFADDR="${MAP[$NAME]:-}"
            if [ -n "${TFADDR}" ]; then
              echo "Importing ruleset '${NAME}' (id=${ID}) into ${TFADDR}"
              terraform import -input=false "${TFADDR}" "${REPO_NAME}:${ID}" || true
            fi
          done

      - name: Terraform plan
        env:
          TF_VAR_github_owner: ${{ github.repository_owner }}
          TF_VAR_repo_name: ${{ github.event.repository.name }}
          TF_VAR_github_token: ${{ secrets.GH_TOKEN_ADMIN }}
        run: terraform plan -input=false -no-color -out=github-admin.tfplan

      - name: Terraform apply
        env:
          TF_VAR_github_owner: ${{ github.repository_owner }}
          TF_VAR_repo_name: ${{ github.event.repository.name }}
          TF_VAR_github_token: ${{ secrets.GH_TOKEN_ADMIN }}
        run: terraform apply -auto-approve github-admin.tfplan
