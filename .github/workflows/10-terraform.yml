name: 05 - PR Quality Gate

on:
  pull_request:
    branches: ["**"]
    types: [opened, synchronize, reopened]
  merge_group: {}

permissions:
  id-token: write
  contents: read
  pull-requests: write

concurrency:
  group: pr-quality-${{ github.event.pull_request.number || github.run_id }}
  cancel-in-progress: true

jobs:
  pr-quality:
    runs-on: ubuntu-latest
    # Only set an environment when pushing to main (to gate apply with env approvals)
    environment: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' && 'production' || '' }}

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v5

      - name: Setup Python
        uses: actions/setup-python@v6
        with:
          python-version: "3.12"

      - name: Branch guard
        run: python scripts/pr_branch_guard.py
        env:
          BRANCH_GUARD: ${{ vars.BRANCH_GUARD || 'on' }}
          GITHUB_HEAD_REF: ${{ github.head_ref }}
          GITHUB_REF_NAME: ${{ github.ref_name }}

      # Fail fast if required repo Variables are missing
      - name: Preflight â€” verify Variables
        shell: bash
        run: |
          set -eu
          [ -n "${{ vars.AWS_REGION }}" ]      || { echo "Missing variable: AWS_REGION"; exit 1; }
          [ -n "${{ vars.AWS_ROLE_ARN }}" ]    || { echo "Missing variable: AWS_ROLE_ARN"; exit 1; }
          [ -n "${{ vars.TF_STATE_BUCKET }}" ] || { echo "Missing variable: TF_STATE_BUCKET"; exit 1; }
          [ -n "${{ vars.TF_STATE_KEY }}" ]    || { echo "Missing variable: TF_STATE_KEY"; exit 1; }
          echo "Preflight OK."

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-session-name: gha-pr-${{ github.run_id }}

      - name: Export TF_VARs (normalized)
        run: python scripts/export_tfvars_ci.py
        env:
          AWS_REGION: ${{ vars.AWS_REGION }}

          RAW_TF_VAR_project_name: ${{ vars.TF_VAR_project_name }}
          RAW_TF_VAR_environment: ${{ vars.TF_VAR_environment }}
          RAW_TF_VAR_vpc_cidr: ${{ vars.TF_VAR_vpc_cidr }}

          RAW_TF_VAR_azs: ${{ vars.TF_VAR_azs }}
          RAW_TF_VAR_public_subnet_cidrs: ${{ vars.TF_VAR_public_subnet_cidrs }}
          RAW_TF_VAR_private_app_subnet_cidrs: ${{ vars.TF_VAR_private_app_subnet_cidrs }}
          RAW_TF_VAR_private_db_subnet_cidrs: ${{ vars.TF_VAR_private_db_subnet_cidrs }}

          RAW_TF_VAR_enable_nat_gateway: ${{ vars.TF_VAR_enable_nat_gateway }}
          RAW_TF_VAR_use_eip: ${{ vars.TF_VAR_use_eip }}
          RAW_TF_VAR_ssh_allowed_cidr: ${{ vars.TF_VAR_ssh_allowed_cidr }}
          RAW_TF_VAR_install_docker_if_missing: ${{ vars.TF_VAR_install_docker_if_missing }}
          RAW_TF_VAR_postgres_user: ${{ vars.TF_VAR_postgres_user }}
          RAW_TF_VAR_postgres_db: ${{ vars.TF_VAR_postgres_db }}
          RAW_TF_VAR_postgres_port: ${{ vars.TF_VAR_postgres_port }}
          RAW_TF_VAR_enable_hello_http: ${{ vars.TF_VAR_enable_hello_http }}
          RAW_TF_VAR_hello_image: ${{ vars.TF_VAR_hello_image }}
          RAW_TF_VAR_hello_port: ${{ vars.TF_VAR_hello_port }}

          # 2c stack-ssm knobs
          RAW_TF_VAR_install_docker_if_missing: ${{ vars.TF_VAR_install_docker_if_missing }}
          RAW_TF_VAR_postgres_user: ${{ vars.TF_VAR_postgres_user }}
          RAW_TF_VAR_postgres_db: ${{ vars.TF_VAR_postgres_db }}
          RAW_TF_VAR_postgres_port: ${{ vars.TF_VAR_postgres_port }}
          RAW_TF_VAR_enable_hello_http: ${{ vars.TF_VAR_enable_hello_http }}
          RAW_TF_VAR_hello_image: ${{ vars.TF_VAR_hello_image }}
          RAW_TF_VAR_hello_port: ${{ vars.TF_VAR_hello_port }}

      - name: Terraform Init (S3 backend only) + Workspace
        shell: bash
        run: |
          set -euo pipefail
          RAW="${GITHUB_HEAD_REF:-${GITHUB_REF_NAME:-main}}"
          WS="branch-${RAW//[^a-zA-Z0-9-_]/-}"
          echo "Using workspace: $WS"

          terraform init -input=false \
            -backend-config="bucket=${{ vars.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ vars.TF_STATE_KEY }}/pr/terraform.tfstate" \
            -backend-config="region=${{ vars.AWS_REGION }}" \
            -backend-config="encrypt=true"

          terraform workspace list || true
          terraform workspace select "$WS" || terraform workspace new "$WS"

      - name: Terraform fmt (check only)
        run: terraform fmt -check -recursive

      - name: Terraform validate (root)
        run: terraform validate

      # Validate bootstrap module too (no backend)
      - name: Terraform validate (bootstrap/)
        working-directory: bootstrap
        run: |
          terraform init -backend=false -input=false
          terraform fmt -check -recursive
          terraform validate

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v5
        with:
          tflint_version: v0.59.1

      - name: TFLint init & run
        run: |
          tflint --init
          tflint -f compact

      - name: Setup Checkov
        run: pip install --quiet "checkov==3.2.474"

      - name: Run Checkov (SARIF output, non-blocking)
        shell: bash
        continue-on-error: true
        run: |
          set -euo pipefail
          mkdir -p reports
          python -m checkov -d . --framework terraform --quiet \
            --output sarif --output-file-path reports/checkov.sarif

      - name: Upload Checkov SARIF
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: checkov-sarif
          path: reports/checkov.sarif
          retention-days: 7

      - name: Terraform plan (safe; no refresh/lock)
        run: terraform plan -input=false -no-color -lock=false -refresh=false -out=tfplan.bin

      - name: Upload plan artifact
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-pr-${{ github.event.pull_request.number || github.run_id }}
          path: tfplan.bin
          retention-days: 7
