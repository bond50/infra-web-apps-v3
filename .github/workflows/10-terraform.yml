name: 10 - Terraform (plan on branches, apply on main)

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

permissions:
  id-token: write
  contents: read

concurrency:
  group: terraform-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  tf:
    runs-on: ubuntu-latest
    # Gate applies with environment approvals when pushing to main
    environment: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' && 'production' || '' }}

    # Make all vars available to every step (Terraform will auto-read TF_VAR_*)
    env:
      AWS_REGION: ${{ vars.AWS_REGION }}
      AWS_ROLE_ARN: ${{ vars.AWS_ROLE_ARN }}
      TF_STATE_BUCKET: ${{ vars.TF_STATE_BUCKET }}
      TF_STATE_TABLE: ${{ vars.TF_STATE_TABLE }}
      TF_STATE_KEY: ${{ vars.TF_STATE_KEY }}

      # Terraform inputs (non-secret) — single source of truth
      TF_VAR_project_name: ${{ vars.TF_VAR_project_name }}
      TF_VAR_environment: ${{ vars.TF_VAR_environment }}
      TF_VAR_region: ${{ vars.TF_VAR_region }}
      TF_VAR_vpc_cidr: ${{ vars.TF_VAR_vpc_cidr }}
      TF_VAR_public_subnet_cidrs: ${{ vars.TF_VAR_public_subnet_cidrs }}
      TF_VAR_private_app_subnet_cidrs: ${{ vars.TF_VAR_private_app_subnet_cidrs }}
      TF_VAR_private_db_subnet_cidrs: ${{ vars.TF_VAR_private_db_subnet_cidrs }}
      TF_VAR_enable_nat_gateway: ${{ vars.TF_VAR_enable_nat_gateway }}
      TF_VAR_ssh_allowed_cidr: ${{ vars.TF_VAR_ssh_allowed_cidr }}

      # 2c host toggles
      TF_VAR_install_docker_if_missing: ${{ vars.TF_VAR_install_docker_if_missing }}
      TF_VAR_stack_dir: ${{ vars.TF_VAR_stack_dir }}
      TF_VAR_postgres_user: ${{ vars.TF_VAR_postgres_user }}
      TF_VAR_postgres_db: ${{ vars.TF_VAR_postgres_db }}
      TF_VAR_postgres_port: ${{ vars.TF_VAR_postgres_port }}
      TF_VAR_enable_hello_http: ${{ vars.TF_VAR_enable_hello_http }}
      TF_VAR_hello_image: ${{ vars.TF_VAR_hello_image }}
      TF_VAR_hello_port: ${{ vars.TF_VAR_hello_port }}

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v5

      - name: Preflight — verify required Variables
        shell: bash
        run: |
          set -eu
          for v in AWS_REGION AWS_ROLE_ARN TF_STATE_BUCKET TF_STATE_TABLE TF_STATE_KEY; do
            test -n "${!v:-}" || { echo "Missing required repo Variable: $v"; exit 1; }
          done
          echo "Preflight OK."

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
          role-session-name: gha-tf-${{ github.run_id }}

      - name: Terraform init (S3 backend; workspace_key_prefix pattern)
        shell: bash
        run: |
          set -eu
          terraform init -input=false -reconfigure \
            -backend-config="bucket=${TF_STATE_BUCKET}" \
            -backend-config="region=${AWS_REGION}" \
            -backend-config="dynamodb_table=${TF_STATE_TABLE}" \
            -backend-config="encrypt=true" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="workspace_key_prefix=${TF_STATE_KEY}"

      - name: Select workspace (prod on main; branch-* otherwise)
        shell: bash
        run: |
          set -eu
          if [ "${GITHUB_REF_NAME}" = "main" ]; then
            WS="prod"
          else
            WS="branch-${GITHUB_REF_NAME//[^a-zA-Z0-9-_]/-}"
          fi
          terraform workspace list || true
          terraform workspace select "$WS" || terraform workspace new "$WS"
          echo "Using workspace: $(terraform workspace show)"

      - name: Debug: show state prefix
        shell: bash
        run: |
          set -eu
          WS="$(terraform workspace show)"
          echo "S3 state path: s3://${TF_STATE_BUCKET}/${TF_STATE_KEY}/${WS}/terraform.tfstate"
          aws s3 ls "s3://${TF_STATE_BUCKET}/${TF_STATE_KEY}/${WS}/" --recursive || true

      - name: Terraform fmt & validate & plan
        shell: bash
        run: |
          set -eu
          terraform fmt -check
          terraform validate
          terraform plan -input=false -no-color -out=tfplan.bin

      - name: Upload plan artifact (for non-main branches)
        if: github.ref != 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan.bin
          retention-days: 7

      - name: Terraform Apply (only on main; gated by environment)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        shell: bash
        run: terraform apply -input=false -auto-approve tfplan.bin

      - name: Post-apply smoke (placeholder)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push' && vars.ENABLE_COMPUTE_TEST == 'true'
        shell: bash
        run: echo "Add EC2/SSM tests when compute module is live."
