###############################################################
# 10 - Terraform (plan on branches, apply on main)
# Purpose:
#  - Use GitHub OIDC to assume AWS role (no static keys).
#  - Plan on branches/PRs; Apply only on main.
#  - Protect apply with GitHub Environment "production" (set reviewers).
###############################################################
name: 10 - Terraform (plan on branches, apply on main)

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

permissions:
  id-token: write
  contents: read

concurrency:
  group: terraform-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  tf:
    runs-on: ubuntu-latest

    # Apply is gated by environment protections (Settings → Environments → production)
    environment: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' && 'production' || '' }}

    steps:
      - uses: actions/checkout@v4

      - name: Preflight — verify Variables (OIDC mode)
        shell: bash
        run: |
          set -eu
          [ -n "${{ vars.AWS_REGION }}" ] || { echo "Missing variable: AWS_REGION"; exit 1; }
          [ -n "${{ vars.AWS_ROLE_ARN }}" ] || { echo "Missing variable: AWS_ROLE_ARN"; exit 1; }
          [ -n "${{ vars.TF_STATE_BUCKET }}" ] || { echo "Missing variable: TF_STATE_BUCKET"; exit 1; }
          [ -n "${{ vars.TF_STATE_TABLE }}" ] || { echo "Missing variable: TF_STATE_TABLE"; exit 1; }
          [ -n "${{ vars.TF_STATE_KEY }}" ] || { echo "Missing variable: TF_STATE_KEY"; exit 1; }
          if [[ ! "${{ vars.AWS_REGION }}" =~ ^[a-z]+-[a-z]+-[0-9]+$ ]]; then
            echo "Invalid AWS_REGION: '${{ vars.AWS_REGION }}'"
            exit 1
          fi
          echo "Preflight OK."

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.6.0

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-session-name: gha-tf-${{ github.run_id }}

      - name: Sanity — whoami
        run: aws sts get-caller-identity

      - name: Terraform Init (S3 backend via Variables)
        run: |
          terraform init -input=false \
            -backend-config="bucket=${{ vars.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ vars.TF_STATE_KEY }}" \
            -backend-config="region=${{ vars.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ vars.TF_STATE_TABLE }}" \
            -backend-config="encrypt=true"

      - name: Terraform Validate & Plan
        env:
          TF_VAR_region: ${{ vars.AWS_REGION }}
        run: |
          terraform fmt -check
          terraform validate
          terraform plan -input=false -no-color -out=tfplan.bin

      - name: Upload plan artifact (for non-main branches)
        if: github.ref != 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan.bin

      - name: Terraform Apply (only on main; gated by environment)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          TF_VAR_region: ${{ vars.AWS_REGION }}
        run: terraform apply -input=false -auto-approve tfplan.bin
