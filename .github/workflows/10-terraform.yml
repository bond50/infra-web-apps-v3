###############################################################
# 10 - Terraform (plan on branches, apply on main)
#  - Plan on any push/PR
#  - Apply only on push to main (gated by environment "production")
#  - S3 backend only (no DynamoDB); per-branch workspace; -lock=false
###############################################################
name: 10 - Terraform (plan on branches, apply on main)

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]

permissions:
  id-token: write
  contents: read

concurrency:
  group: terraform-${{ github.ref_name }}
  cancel-in-progress: true

jobs:
  tf:
    runs-on: ubuntu-latest
    # Gate apply behind an environment with reviewers
    environment: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' && 'production' || '' }}

    steps:
      - name: Checkout repository code
        uses: actions/checkout@v5

      - name: Preflight — verify Variables (OIDC mode)
        shell: bash
        run: |
          set -eu
          [ -n "${{ vars.AWS_REGION }}" ]      || { echo "Missing variable: AWS_REGION"; exit 1; }
          [ -n "${{ vars.AWS_ROLE_ARN }}" ]    || { echo "Missing variable: AWS_ROLE_ARN"; exit 1; }
          [ -n "${{ vars.TF_STATE_BUCKET }}" ] || { echo "Missing variable: TF_STATE_BUCKET"; exit 1; }
          [ -n "${{ vars.TF_STATE_KEY }}" ]    || { echo "Missing variable: TF_STATE_KEY"; exit 1; }
          echo "Preflight OK."

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.13.3

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v5
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ vars.AWS_REGION }}
          role-session-name: gha-tf-${{ github.run_id }}

      - name: Sanity — whoami
        run: aws sts get-caller-identity

      - name: Terraform Init (S3 backend only) + Workspace
        shell: bash
        run: |
          set -euo pipefail
          RAW="${GITHUB_REF_NAME:-main}"
          WS="branch-${RAW//[^a-zA-Z0-9-_]/-}"
          echo "Using workspace: $WS"

          terraform init -input=false \
            -backend-config="bucket=${{ vars.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ vars.TF_STATE_KEY }}/ci/terraform.tfstate" \
            -backend-config="region=${{ vars.AWS_REGION }}" \
            -backend-config="encrypt=true"

          terraform workspace list || true
          terraform workspace select "$WS" || terraform workspace new "$WS"

      - name: Terraform fmt & validate & plan
        env:
          TF_VAR_region: ${{ vars.AWS_REGION }}
          TF_VAR_project_name: ${{ vars.TF_VAR_project_name }}
          TF_VAR_environment: ${{ vars.TF_VAR_environment }}
          TF_VAR_vpc_cidr: ${{ vars.TF_VAR_vpc_cidr }}
          TF_VAR_public_subnet_cidrs: ${{ vars.TF_VAR_public_subnet_cidrs }}
          TF_VAR_private_app_subnet_cidrs: ${{ vars.TF_VAR_private_app_subnet_cidrs }}
          TF_VAR_private_db_subnet_cidrs: ${{ vars.TF_VAR_private_db_subnet_cidrs }}
          TF_VAR_enable_nat_gateway: ${{ vars.TF_VAR_enable_nat_gateway }}
          TF_VAR_use_eip: ${{ vars.TF_VAR_use_eip }}
          TF_VAR_azs: ${{ vars.TF_VAR_azs }}

        run: |
          terraform fmt -check
          terraform validate
          terraform plan -input=false -no-color -lock=false -out=tfplan.bin

      - name: Upload plan artifact (for non-main branches)
        if: github.ref != 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: tfplan
          path: tfplan.bin
          retention-days: 7

      - name: Terraform Apply (only on main; gated by environment)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          TF_VAR_region: ${{ vars.AWS_REGION }}
        run: terraform apply -input=false -auto-approve -lock=false tfplan.bin

      - name: Post-apply smoke test (EC2 via SSM)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        env:
          INSTANCE_ID: ${{ steps.outs.outputs.instance_id }}
        run: |
          set -euo pipefail
          # pull instance id from TF output if you don't already export it:
          terraform output -json | jq -r '.web_instance_id.value' > iid.txt
          IID="$(cat iid.txt)"
          echo "Testing instance: $IID"

          # docker ps and check service status
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --parameters commands='["docker ps","systemctl status docker --no-pager || true","ss -lnt | grep 5432 || true"]' \
            --instance-ids "$IID" \
            --output text --query "Command.CommandId" > cmd.txt

          CID="$(cat cmd.txt)"
          aws ssm get-command-invocation --command-id "$CID" --instance-id "$IID" --query "Status" --output text
